{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["Space","props","className","value","Column","onClick","handleClick","Array","spaces","length","map","x","j","Board","state","boardState","fill","playerTurn","gameSelected","winner","full","this","setState","colID","boardCopy","arr","slice","indexOf","newColumn","reverse","makeMove","bs","c","r","checkLine","checkWinner","winnerMessageStyle","columns","i","startGame","Component","App","a","b","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d8a389f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\n\n//players tokens go in spaces \n//to win the player must fill 4 spaces in a line\nfunction Space(props){\n  return <div className=\"Space\"><div className={props.value}></div></div>\n}\n\n// spaces make up columns which can be clicked on\nfunction Column(props){\n    return <div className=\"Column\" onClick={() => props.handleClick()}>\n      {[...Array(props.spaces.length)].map((x, j) => \n        <Space key={j} value={props.spaces[j]}></Space>)}\n      </div>\n }\n\nclass Board extends Component {\n\n  constructor() {\n    super();\n\n    //occurs when app is opened\n    this.state = {\n      //empty board with 7 columns and 6 rows created using a double array\n      boardState: new Array(7).fill(new Array(6).fill(null)),\n      //red player starts\n      playerTurn: 'Red',\n      //game hasnt started yet\n      gameSelected: true,\n      //no winner yet\n      winner: '',\n      // spaces are all empty\n      full:0\n    }\n  }\n\n  //when user starts a game\n  startGame(){\n    this.setState({\n      //game has been started\n       gameSelected: true, \n       //board is empty \n       boardState: new Array(7).fill(new Array(6).fill(null)),\n      // full set back to 0\n      full:0\n    })\n  }\n\n  //when a column gets clicked then the move gets made \n  makeMove(colID){\n    //copy of the board gets created\n    const boardCopy = this.state.boardState.map(function(arr) {\n      return arr.slice();\n    });\n    //confirms that the column isnt full \n    if( boardCopy[colID].indexOf(null) !== -1 ){\n      //player token gets added to the column on the board \n      let newColumn = boardCopy[colID].reverse()\n      newColumn[newColumn.indexOf(null)] = this.state.playerTurn\n      newColumn.reverse()\n      //board updates when move is made, now its the next players turn \n      this.setState({\n        playerTurn: (this.state.playerTurn === 'Red') ? 'Yellow' : 'Red',\n        boardState: boardCopy,\n        full:this.state.full+1\n      })\n    }\n\n  }\n\n  //move is made when clicked\n  handleClick(colID) {\n    //this only works when the game is still going and no one has won \n    if(this.state.winner === ''){\n      this.makeMove(colID)\n    }\n  }\n  \n  //every time the board is updated/move is made it checks for a winner\n  componentDidUpdate(){\n    let winner = checkWinner(this.state.boardState)\n    if(this.state.winner !== winner)\n      this.setState({winner: winner})\n  }\n\n  render(){\n\n    //display winner message when the game is won\n    let winnerMessageStyle\n    if(this.state.winner !== \"\"){\n      winnerMessageStyle = \"winnerMessage appear\"\n    }else {\n      winnerMessageStyle = \"winnerMessage\"\n    }\n\n    //Contruct columns\n    let columns = [...Array(this.state.boardState.length)].map((x, i) => \n      <Column \n          key={i}\n          spaces={this.state.boardState[i]}\n          handleClick={() => this.handleClick(i)}\n      ></Column>\n    )\n\n    //columns are displayed, and winner message is showed if available \n    return (\n      <div>\n        {this.state.gameSelected &&\n          <div className=\"Board\">\n            {columns}\n          </div>\n        }\n        <div className={winnerMessageStyle}>{this.state.winner}</div>\n        {(!this.state.gameSelected || this.state.winner !== '' || this.state.full===42) &&\n          <div>\n            <button onClick={() => this.startGame()}>Play a New Game</button>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Connect Four</h2>\n        </div>\n        <div className=\"Game\">\n          <Board></Board>\n        </div>\n      </div>\n    );\n  }\n}\n\n//checks to see if line is empty and if it is all the same colour tokens\nfunction checkLine(a,b,c,d) {\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\n//checks to see if there is a winner,display the message if there is one\nfunction checkWinner(bs) {\n//c columns \n//r rows \n//bs[c][r] items in a double array, these are considered as teh spaces and are filled with the players tokens\n  //check vertical lines\n    for (let c = 0; c < 7; c++)\n        for (let r = 0; r < 4; r++)\n            if (checkLine(bs[c][r], bs[c][r+1], bs[c][r+2], bs[c][r+3]))\n               return bs[c][r] +' wins!'\n\n    //check horizontal right\n    for (let r = 0; r < 6; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r], bs[c+2][r], bs[c+3][r]))\n                 return bs[c][r] +' wins!'\n\n    //check diagonal lines, left\n    for (let r = 0; r < 3; r++)\n         for (let c = 0; c < 4; c++)\n             if (checkLine(bs[c][r], bs[c+1][r+1], bs[c+2][r+2], bs[c+3][r+3]))\n                return bs[c][r] +' wins!'\n\n    //checks diagonal lines, right\n    for (let r = 0; r < 4; r++)\n         for (let c = 3; c < 6; c++)\n             if (checkLine(bs[c][r], bs[c-1][r+1], bs[c-2][r+2], bs[c-3][r+3]))\n                return bs[c][r] +' wins!'\n\n    //no winner, no winner message\n    return \"\";\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}